package aoc.day18

import aoc.Resources
import aoc.day18.SnailFishNumber
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers

class SnailFishNumberAlgebraSpec extends AnyFlatSpec with Matchers {

  behavior of "explode"

  for {
    (input, expected) <- List(
      ("[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]"),
      ("[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]"),
      ("[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]"),
      ("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"),
      ("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"),
      ("[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]", "[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]"),
      ("[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]", "[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]"),
    )
  } it should s"explode: $input" in {
    val num = Parser.parseSnailNumber(input)
    val result = SnailFishNumberAlgebra.explode(num)

    result.map(_.toString) shouldBe Some(expected)
  }

  behavior of "split"

  for {
    (input, expected) <- List(
      (SnailFishNumber(10), "[5,5]"),
      (SnailFishNumber(11), "[5,6]"),
      (SnailFishNumber(1, 10), "[1,[5,5]]"),
      (SnailFishNumber(10, 1), "[[5,5],1]"),
    )
  } it should s"explode: $input" in {
    val result = SnailFishNumberAlgebra.split(input)

    result.map(_.toString) shouldBe Some(expected)
  }

  behavior of "reduce"

  for {
    (input, expected) <- List(
      ("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"),
      ("[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]",
        "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"),
      ("[[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]],[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]]",
        "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]"),
      ("[[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]],[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]]",
        "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"),
      ("[[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]],[7,[5,[[3,8],[1,4]]]]]",
        "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]"),
      ("[[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]],[[2,[2,2]],[8,[8,1]]]]",
        "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]"),
      ("[[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]],[2,9]]",
        "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]"),
      ("[[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]],[1,[[[9,3],9],[[9,0],[0,7]]]]]",
        "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]"),
      ("[[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]],[[[5,[7,4]],7],1]]",
        "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]"),
      ("[[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]],[[[[4,2],2],6],[8,7]]]",
        "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")
    )
  } it should s"reduce: $input" in {
    val num = Parser.parseSnailNumber(input)
    val result = SnailFishNumberAlgebra.reduce(num)

    result.toString shouldBe expected
  }

  behavior of "magnitute"

  for {
    (input, expected) <- List(
      ("[[1,2],[[3,4],5]]", 143),
      ("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384),
      ("[[[[1,1],[2,2]],[3,3]],[4,4]]", 445),
      ("[[[[3,0],[5,3]],[4,4]],[5,5]]", 791),
      ("[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137),
      ("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488),
    )
  } it should s"calculate magnitute: $input" in {
    val num = Parser.parseSnailNumber(input)
    val result = SnailFishNumberAlgebra.magnitude(num)

    result shouldBe expected
  }

  behavior of "add"

  it should "sum all numbers in sample" in {
    val input = Resources.lines("day18_sample.txt").map(Parser.parseSnailNumber)
    val sum = input.reduceLeft(SnailFishNumberAlgebra.add).toString
    sum shouldBe "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]"
  }

}
